{"version":3,"sources":["components/TextFieldAndCheckBox.js","components/Test.js","App.js","serviceWorker.js","index.js"],"names":["TextFieldAndCheckBox","props","React","useState","checkBox1","setCheckBox1","checkBox2","setCheckBox2","price","setPrice","percent","setPercent","disableTextField1","setDisableTextField1","disableTextField2","setDisableTextField2","TableCell","component","scope","Checkbox","checked","onChange","inputProps","TextField","size","error","helperText","disabled","type","fullWidth","label","variant","value","e","target","style","width","useStyles","makeStyles","table","minWidth","SimpleTable","classes","rows","TableContainer","Paper","Table","className","aria-label","TableHead","TableRow","map","key","TableBody","index","App","Grid","container","spacing","item","xs","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f46b6a25.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { TextField, Checkbox, TableCell } from \"@material-ui/core\";\r\nconst TextFieldAndCheckBox = (props) => {\r\n  const [checkBox1, setCheckBox1] = React.useState(false);\r\n  const [checkBox2, setCheckBox2] = React.useState(false);\r\n  const [price, setPrice] = React.useState(0);\r\n  const [percent, setPercent] = React.useState(0);\r\n  const [disableTextField1, setDisableTextField1] = React.useState(true);\r\n  const [disableTextField2, setDisableTextField2] = React.useState(true);\r\n  return (\r\n    <TableCell component=\"th\" scope=\"row\">\r\n      <Checkbox\r\n        checked={checkBox1}\r\n        onChange={() => {\r\n          setCheckBox2(false);\r\n          setCheckBox1(true);\r\n          setDisableTextField1(false);\r\n          setDisableTextField2(true);\r\n          setPrice(0);\r\n        }}\r\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        error={percent >= 0 && percent <= 100 ? false : true}\r\n        helperText={\r\n          percent >= 0 && percent <= 100 ? \"\" : \"Percent >=0 && <=100\"\r\n        }\r\n        disabled={disableTextField1}\r\n        type=\"number\"\r\n        fullWidth\r\n        label=\"%\"\r\n        variant=\"outlined\"\r\n        value={percent}\r\n        onChange={(e) => {\r\n          setPercent(e.target.value);\r\n        }}\r\n        style={{ width: 100 }}\r\n      ></TextField>\r\n      <br />\r\n      <br />\r\n      <Checkbox\r\n        checked={checkBox2}\r\n        onChange={() => {\r\n          setCheckBox2(true);\r\n          setCheckBox1(false);\r\n          setDisableTextField2(false);\r\n          setDisableTextField1(true);\r\n          setPercent(0);\r\n        }}\r\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        error={price >= 0 ? false : true}\r\n        helperText={price >= 0 ? \"\" : \"Price >=0\"}\r\n        disabled={disableTextField2}\r\n        type=\"number\"\r\n        fullWidth\r\n        label=\"Â£\"\r\n        variant=\"outlined\"\r\n        value={price}\r\n        onChange={(e) => {\r\n          setPrice(e.target.value);\r\n        }}\r\n        style={{ width: 100 }}\r\n      ></TextField>\r\n    </TableCell>\r\n  );\r\n};\r\n\r\nexport default TextFieldAndCheckBox;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextFieldAndCheckBox from \"../components/TextFieldAndCheckBox\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n});\r\n\r\nexport default function SimpleTable() {\r\n  const classes = useStyles();\r\n  const rows = [\r\n    \"Estate\",\r\n    \"5-6 Passengers\",\r\n    \"7 Passengers\",\r\n    \"8 Passengers\",\r\n    \"9 Passengers\",\r\n    \"15 Passengers\",\r\n    \"16 Passengers\",\r\n  ];\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            {rows.map((rows) => (\r\n              <TableCell key={rows} component=\"th\" scope=\"row\">\r\n                {rows}\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          <TableRow>\r\n            {rows.map((rows, index) => (\r\n              <TextFieldAndCheckBox key={index}></TextFieldAndCheckBox>\r\n            ))}\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport Test from \"./components/Test\";\nimport { Grid } from \"@material-ui/core\";\nfunction App() {\n  return (\n    <Grid container spacing={5}>\n      <Grid item xs={2}></Grid>\n      <Grid item xs={8}>\n        <div style={{ textAlign: \"center\" }}>\n          <h1>Arqam Shakeel FA17-BCS-001 Section B</h1>\n          <h1>Assignment 2</h1>\n          <h1>Made in React.js using material-ui</h1>\n        </div>\n      </Grid>\n      <Grid item xs={2}></Grid>\n\n      <Grid item xs={1}></Grid>\n      <Grid item xs={10}>\n        <Test></Test>\n      </Grid>\n      <Grid item xs={1}></Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"typeface-roboto\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}